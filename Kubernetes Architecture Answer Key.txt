Kubernetes Architecture & Component Quiz Answers

-----------------------------------------------------------------------------

1. (d)
2. (a)
3. (e)
4. (c)
5. (b)
6. (d)
7. (c)
8. (a)
9. (b)
10. (a)
11. (a)
12. (c)
13. (c) & (d)
14. (a) & (b)
15. (b)
16. (d)
17. (c)
18. (b)
19. (c) (technically it should only be running on worker node but as some components of the control plane runs as a container kubelet is required on the  control plane node too)
20. (b)
21. (a)
22. (b)


Kubernetes Architecture & Component Questionnaire Answers

-----------------------------------------------------------------

1. Write a short note on Kubernetes Object.

Kubernetes objects are a way of defining parts of the cluster which the system needs to manage. It includes deployments, pods, replicaSets, policies etc. They define what a cluster would look like and what kind of workload will it maintain.

There are two main components of an Object, spec and state. state contains the current state of the object whereas the spec defines the desired state of the object which the control plane helps the cluster in achieving. 

Read more on this: https://kubernetes.io/docs/concepts/overview/working-with-objects/

2. Describe a Control Plane.

Control Plane is a orchestraction layer which consists of one or more nodes which helps in managing jobs, deployments, pods etc. on nodes which are used for deploying the containers and run workload defined for the cluster. There are several components in Control Plane, a few of them are:

	a) etcd
	b) Controller Manager
	c) Scheduler
	d) API Server
	e) Cloud Controller Manager

Depending upon the complexity of the cluster a control plane can have several other components which helps in administering, securing and managing workload on a cluster. A few things which are handled by control plane:

	a) Overall health of a cluster.
	b) Exposes Kubernetes API which facilitates communication between components and users.
	c) Schedules pods for nodes
	d) Analyses load on a particular node for pod deployment
	e) Automates Scaling and Load Balancing.
	f) Maintains desired state of the cluster.

Control Plane can be configured to do much more and offers overall control over the deployment in kubernetes.

Read more on this : https://kubernetes.io/docs/concepts/overview/components/#control-plane-components


3. What is role of API Server in Control Plane?

API Server is a part of Control Plane which exposes the Kubernetes API, This Kubenetes API contains means to communication between components both external and internal. It is responsible for most of the communication between control plane and kubelet (find more about kubelet here [https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/]). It is also responsible for validating any data which has been sent through the endpoints.

Read More on this:

https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
https://kubernetes.io/docs/concepts/overview/kubernetes-api/

4. Describe the role of etcd.

The etcd is a key-value store which stores all the shared configuration data about the cluster in it. It contains data such as current state, desired state, configuration of resources, and runtime data. It communicates with API Server for data manipulation and retrieval.

Read More on this: 

https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/
https://www.armosec.io/glossary/etcd-kubernetes/


5. What are the responsibilities of kube-scheduler in Control Plane?

kube-scheduler is a part of the control plane which is responsible for schedules newly created pod on a suitable node. The kube-scheduler used the metadata about the nodes and pods created on them to make this decision of selecting suitable nodes in the cluster and then binds one of these suitable nodes which scores the highest in the compatablity criteria.

Read more on this: 

https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/
https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/


6. Explain the role of kube-controller-manager in detail.

Controllers in kubernetes have a very vital role in changing the state of the cluster by moving them from current state to desired state. They constantly watch all the nodes in the cluster and checks if any of those are having any discrepancies from their desired state and make the appropriate amount of changes in the current state for to reach the desired state. 

kube-controller-manager is a service which bundles all the controllers in a cluster together and maintains the desired state of a cluster at all times.

Read more on this: 

https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/
https://kubernetes.io/docs/concepts/overview/components/


7. What does the cloud-controller-manager do?

Kubernetes can work on physical machines, virtual machines and cloud platforms. While working in a cloud based architecture, we need some way of communication between cloud and kubernetes. This communication is handled by cloud-controller-manager. It communicates with the cloud providers API for controlling cloud-related object. This decouples the cloud related controllers from the other type of controllers and defines a sophisticated system for controlling cloud based resources. 

Read more on this:

https://kubernetes.io/docs/concepts/architecture/cloud-controller/
https://kubernetes.io/docs/concepts/architecture/controller/

8. What do you mean by worker node or slave?

A Worker node is any node on the cluster on which the actual workload runs. They must contain kubelet for communicating with the control plane. It must also contain container runtime to provide underlying functionality for containers. Kubelet works with this container runtimes to execute pods and deployments on the node. In Addition to the above two, the worker node also contains the kube-proxy which is responsible for managing network related routing and redirection from service to pod.

Read more on this:

https://kubernetes.io/docs/concepts/architecture/nodes/
https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/


9. What is the role of container runtime?

Container runtime provide underlying functionalities for creating and maintaining containers in a host system. They are essential for creating pods as they sit at the lowest level and provide required foundation for creating containers on a node.

Read more on this:

https://kubernetes.io/docs/setup/production-environment/container-runtimes/
https://github.com/containerd/containerd/blob/main/README.md


10. What are the responsibilities of kubelet?

kubelet is a daemon running on the nodes which works as the node agent. It is responsible for dispatching any new pods, registers worker nodes with the API Server and is responsible for managing the pods on the worker nodes end. It play a vital role in control plane and worker node communication.

Read more on this:

https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/
https://www.armosec.io/glossary/kubelet/#:~:text=Kubelet%20plays%20an%20essential%20role,a%20Kubernetes%20cluster's%20operational%20stability.


11. Explain the role of kube-proxy in detail.

kube-proxy is a network proxy which is responsible the request routing and redirection from service to pods. This also takes responsibility for efficient ip mapping and port forwarding for services and pods. It defines the network rules for forwarding the request from service layer to pod layer.

Read more about this:

https://medium.com/@amroessameldin/kube-proxy-what-is-it-and-how-it-works-6def85d9bc8f


12. What is the significance of container network interface (cni) plugins?

Container network interface plugins are responsible for dynamically configuring cluster's network configuration. It is responsible for assigning cluster wide IPs, maintaining communication interfaces between pods etc. It takes care of the inter pod communication network and configures the network in such a way that all the pods can communicate with one and other.

Read more about this:

https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#network-plugin-requirements
https://kubernetes.io/docs/concepts/services-networking/#the-kubernetes-network-model
https://github.com/containernetworking/cni/blob/main/README.md


13. What is the difference between the container network interface (CNI) and kube-proxy?

kube-proxy and container network interfaces, both work with network related tasks but container network interface is actually responsible for providing seemless communication between containers on same or different node, whereas, the kube-proxy layer actually sits between service layer and pod layer and is responsible for service pod communication when a request is sent to the service object.

Read more on this:

https://github.com/containernetworking/cni/blob/main/README.md
https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/
https://kubernetes.io/docs/concepts/services-networking/#the-kubernetes-network-model
https://medium.com/@seifeddinerajhi/kube-proxy-and-cni-the-hidden-components-of-kubernetes-networking-eb30000bf87a#:~:text=Kubernetes%20networking%20is%20powered%20by,running%20containerized%20applications%20on%20Kubernetes.




