Docker Image:

Docker Images are packages for specific applications which are used to instantiate docker containers.


Commands:

1. sudo docker pull <docker-image>

This command pulls docker images from the docker hub to your local environment.

2. sudo docker pull -q <docker-image>

This command pulls docker images from the docker hub with the verbose output.

3. sudo docker images or sudo docker image list or sudo docker image ls

All the above commands list the images available in the local environment.

4. sudo docker images -q or sudo docker image list -q or sudo docker image ls -q

All the above commands list the image ids for available docker images.

3. sudo docker rmi <docker-image>

This command removes the docker-image from your local environment.

Hands-On/Practice Material:

1. Pull the docker image mysql:latest.
2. Pull the docker image tomcat.
3. Pull docker image nginx from docker hub.
4. Print the docker images available in the local envirnment.
5. Remove nginx docker image from your local environment.
6. Remove tomcat docker image from your local envirnment.
7. List all the docker images available in the local environment.
8. List the image id for all the docker images.

Docker Containers:

Containers are isolated environment which contain a contains an application inside of it. They are highly scalable and resource efficient.

Commands:

1. sudo docker run <docker-image>

Command to create and run a docker container. This command will run the docker container in foreground and will use any arbitrary name for the container.

2. sudo docker ps

Command to list all the running docker container.

3. sudo docker ps -a

Command to list all the docker containers running and stopped.

4. sudo docker run --name <container-name>  <docker-image>

Command to create and run a docker container and assign it the name <container-name>.

5. sudo docker run -d <docker-image>

Command to create and run a docker container in the background (the output will not be displayed on-screen)

6. sudo docker stop <container-name> or sudo docker stop <container-id>

These commands can be used to stop any container running in foreground or background.

7. sudo docker start <container-name> or sudo docker start <container-id>

These commands can be used to start any stopped servers.

8. sudo docker ps -q

This command prints all the container ids for docker containers running at the moment.

9. sudo docker ps -l

This command is used to print the latest created container.

10. sudo docker restart <container-name>

This command can be used to restart any running or stopped containers.

11. sudo docker run -d --name <container-name> -P <docker-image>

This command creates a docker container with the name <container-name> which runs in the background and forwards any ports exposed for the docker container to arbitrary ports of the host machine.

12. sudo docker run -it <docker-image> /bin/bash

This creates and runs a docker container in interactive terminal mode with /bin/bash as the shell for interaction.

13. sudo docker run --name <container-name> -p <host-port>:<container-port> <docker-image>

This creates and runs a docker container with the name <container-name> and maps any <container-port> to <host-port> for external access.

14. sudo docker exec <container-name> <command>

This runs a <command> in the container with name <container-name>

15. sudo docker attach <container-name> 

This is command to enter into the container STDIN.

16. sudo docker run -e <environment-variable>=<value> <docker-image>

This command creates and runs a container from <docker-image> and sets the value of <environment-variable> to <value>.

17. sudo docker logs <container-name> or sudo docker logs <container-id>

This command prints the logs of <container-name> or <container-id> at that moment

18. sudo docker logs --follow <container-name> or sudo docker logs --follow <container-id>

The above commands will print logs for the container with name <container-name> or container id <container-id> and follow for any new logs from the services running on the container.

19. sudo docker logs -t <variable>

The above command prints the last <variable> number of logs from the logs.

20. sudo docker inspect <container-name>

The above command prints the properties of a container with the name <container-name>

21. sudo docker port <container-name>

This command prints the port mapping for the container with name <container-name>

22. sudo docker create <docker-image>

This creates a docker container with the <docker-image>

23. sudo docker rm <container-name> or sudo docker remove <container-name>

Removes the container with name <container-name> or id <container-id> given that the container is stopped.

24. sudo docker rm -f <container-name> or sudo docker remove -f <container-name>
 
Removes the container with name <container-name> or id <container-id>, forcefully. This way you can remove the container without stopping it.


Hands-On/Practice Material:

1. Create (don't run, just create) a docker container with docker image mysql
2. Check the status of the above created mysql container.
3. If the status of the above created mysql container is exited, then check the logs for the container and report the issue.
4. Create and run a docker container in interactive terminal mode using ubuntu:22.04 image, run bash shell on it.
5. Create and run a docker container in background using ubuntu:latest image.
6. For the container created in step 5, check wheather you are able to attach to it. If not, then gather info on why?
7. Create an container with container name "tomcat-server" and run it in the background using docker image tomcat.
8. Stop the container created in Step 7.
9. Gather info about all the containers created yet using "docker ps" command
10. Start the container created in Step 7.
11. Print logs for the container created in Step 7.
12. Create a new container using tomcat and map container port 8080 to host port 32777.
13. Start the container created in step 12 and check if you are able to connect to the server using curl.
14. Create and run a new container with mysql docker image and give it a name "mysql_container_1" and set MYSQL_ROOT_PASSWORD to user@123
15. Try executing bash shell in interactive terminal mode on the container created in step 14.
16. Print properties for the container "mysql_container_1"
17. Find out all the containers running in the host and create a table which maps container-ids to container-name.
18. Print the last 5 logs of the "mysql_container_1"
19. Print the logs of container "tomcat-server" and follow the logs for it. (Use Ctrl-C after taking a screenshot)
20. Remove container created in the Step 1.
21. Print the all the containers present in the host.
22. Print the properties of "tomcat-server"
23. Restart "mysql_container_1"

BONUS QUESTIONS:

1. Create a one-line command for removing all the docker images from the local envirnment.
2. Create a one-line command to forcefully remove all running or stopped containers in the local environment.

